{sys, [
       %% Where the dependent libraries needed by ez (e.g., lager). The ez root directory isn't 
       %% needed since it's the only application in this project. This directive is similar to
       %% putting "...-env ERL_LIBS <list-of-directories>" on the erl command line.
       {lib_dirs, ["../deps"]},
       
       %% Specifies the Erlang runtime to include plus ...
       {erts, [{mod_cond, derived}, {app_file, strip}]},
       
       %% Directs reltool to create a new app file that doesn't include unused and/or excluded
       %% modules (see the "exclude" directives below).
       {app_file, strip},
       
       %% Specifies the app (ez), the version (1) and the applications that are part of the 
       %% release. lager, cowboy, etc don't need to be specified here as this information will 
       %% be retrieved from the ez.app.src file. (Not sure why all the apps need to be explicitly
       %% mentioned below, but they do).
       {rel, "ez", "1",
        [kernel, stdlib, sasl, ez]},
        
        %% Needed to avoid "rebar generate" errors even though the "{rel, ...} directive above
        %% should be sufficient. It does create the "boot" file needed which specifies how to 
        %% boot the Erlang VM at startup, which isn't created by the previous "rel" directive.
        %% This may only be an artifact of the "{overlay ...} directive below and not actually
        %% used when the app (ez) is started.
       {rel, "start_clean", "",
        [kernel, stdlib]},
        
       %% The app (ez) to boot with
       {boot_rel, "ez"},
       
        %% Include a minimum set of the erts libraries. Other options include "development" and
        %% "standalone" which include a larger set of the erts libraries.
       {profile, embedded},
       
       %% Include only those dependent applications (e.g., lager) referenced by the application (ez).
       {incl_cond, derived},
       
       %% Specify what to exclude from the release
       {excl_archive_filters, [".*"]}, %% Do not archive built libs
       {excl_sys_filters, ["^bin/(?!start_clean.boot)",
                           "^erts.*/bin/(dialyzer|typer)",
                           "^erts.*/(doc|info|include|lib|man|src)"]},
                           
       %% Do not include the .gitignore file wherever it is found
       {excl_app_filters, ["\.gitignore"]},
       
       %% Specifies all the applications to be included in this release. Every application needed
       %% by "ez", or referenced by applications needed by "ez" (e.g., lager uses goldrush), must
       %% be present. "{include_cond, include}" specifies that the associated application is to be
       %% included. "{include_cond, exclude}" specifies that the associated application is to be
       %% excluded. In this case hipe is excluded since it's already part of the application.
       {app, hipe,   [{incl_cond, exclude}]},
       {app, sasl,   [{incl_cond, include}]},
       {app, compiler,   [{incl_cond, include}]},
       {app, syntax_tools,   [{incl_cond, include}]},
       {app, goldrush,   [{incl_cond, include}]},
       {app, lager,   [{incl_cond, include}]},
       {app, ezk,   [{incl_cond, include}]},
       {app, ranch,   [{incl_cond, include}]},
       {app, cowlib,   [{incl_cond, include}]},
       {app, cowboy,   [{incl_cond, include}]},
       
       %% "{mod_cond, app}" specifies all modules in the application (ez) are to be part of the 
       %% release. Other options include "ebin", "derived", "none" and "all". "none" won't include
       %% anything and so isn't very useful. "all" goes to the opposite extreme and is the default.
       %% "derived" will attempt to figure out which modules should be included. "ebin" will use the
       %% contents of "ebin" in addition to those "derived" will pick. "{lib_dir, ".."}" states
       %% where the application (ez) can be found.
       {app, ez, [{mod_cond, app}, {incl_cond, include}, {lib_dir, ".."}]}
      ]}.

%% Not sure what this is or why it's needed. It is the name of the directory the release files
%% will be located. But it apparently must be identical to something else above because any value
%% other than "ez" will cause "rebar generate" errors.
{target_dir, "ez"}.

%% Needed because there are several files in the "files" directory that must be copied over to the
%% release directory (rel/ez) during the "rebar generate" process.  The files directory is created
%% during the "rebar create-node" process. It is not created during "rebar generate".
 {overlay, [
            {mkdir, "log/sasl"},
            {copy, "files/erl", "\{\{erts_vsn\}\}/bin/erl"},
            {copy, "files/nodetool", "releases/\{\{rel_vsn\}\}/nodetool"},
            {copy, "ez/bin/start_clean.boot",
                   "\{\{erts_vsn\}\}/bin/start_clean.boot"},
            {copy, "files/ez", "bin/ez"},
            {copy, "files/ez.cmd", "bin/ez.cmd"},
            {copy, "files/start_erl.cmd", "bin/start_erl.cmd"},
            {copy, "files/install_upgrade.escript", "bin/install_upgrade.escript"},
            
            %% rebar generates a generic sys.config file. It needs to be changed to support any
            %% additional application config directives.
            {copy, "files/sys.config", "releases/\{\{rel_vsn\}\}/sys.config"},
            
            %% This is a default vm.args file created by rebar. It needs to be changed to support any
            %% additional application VM arguments.
            {copy, "files/vm.args", "releases/\{\{rel_vsn\}\}/vm.args"}
           ]}.
